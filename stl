#!/usr/bin/env python


from __future__ import print_function

import sys
import json
import time
import requests
import re
import argparse
import base64
import logging
import codecs


"""Extracts some information from the JSON result of an Spotify API tracks request.
"""


class Auth(object):
    def __init__(self, credentialsfilename):
        self._clientid = None
        self._clientsecret = None
        self._accesstoken = None
        self._tokenexpiretime = None
        try:
            # Python 2.7
            import ConfigParser
            cp = ConfigParser.ConfigParser()
            try:
                cp.read(credentialsfilename)
            except ConfigParser.MissingSectionHeaderError as e:
                logging.error('missing section "spotify" in {}'.format(credentialsfilename))
                raise e
            if not cp.has_section('spotify'):
                logging.error('missing section "spotify" in {}'.format(credentialsfilename))
                raise Exception
            if cp.has_option('spotify', 'ClientID'):
                self._clientid = cp.get('spotify', 'ClientID')
            if cp.has_option('spotify', 'ClientSecret'):
                self._clientsecret = cp.get('spotify', 'ClientSecret')
            if self._clientid is None and self._clientsecret is None:
                if cp.has_option('spotify', 'AccessToken'):
                    self._accesstoken = cp.get('spotify', 'AccessToken')
                    # assume the token was just created and is valid for the next 55 minutes
                    self._tokenexpiretime = int(time.time()) + (55 * 60)
        except ImportError:
            # Python 3.x
            import configparser
            cp = configparser.ConfigParser()
            try:
                cp.read(credentialsfilename)
            except configparser.MissingSectionHeaderError as e:
                logging.error('missing section "spotify" in {}'.format(credentialsfilename))
                raise e
            if 'spotify' not in cp:
                logging.error('missing section "spotify" in {}'.format(credentialsfilename))
                raise Exception
            if 'ClientID' in cp['spotify']:
                self._clientid = cp['spotify']['ClientID']
            if 'ClientSecret' in cp['spotify']:
                self._clientsecret = cp['spotify']['ClientSecret']
            if self._clientid is None and self._clientsecret is None:
                if 'AccessToken' in cp['spotify']:
                    self._accesstoken = cp['spotify']['AccessToken']
                    # assume the token was just created and is valid for the next 55 minutes
                    self._tokenexpiretime = int(time.time()) + (55 * 60)

        if self._accesstoken is None and (self._clientid is None or self._clientsecret is None):
            logging.error('AccessToken or ClientID/ClientSecret missing in {}'.format(credentialsfilename))
            raise Exception

    @property
    def clientid(self):
        return self._clientid

    @property
    def clientsecret(self):
        return self._clientsecret

    @property
    def accesstoken(self):
        return self._accesstoken

    def hasvalidaccesstoken(self):
        return self.accesstoken is not None and self._tokenexpiretime is not None and self._tokenexpiretime > int(time.time())

    def authenticate(self):
        url = 'https://accounts.spotify.com/api/token'
        data = {'grant_type': 'client_credentials'}
        try:
            # Python 2.7
            b64cred = base64.b64encode('{}:{}'.format(self._clientid, self._clientsecret))
        except TypeError:
            # Python 3.x
            s = '{}:{}'.format(self._clientid, self._clientsecret)
            b64cred = base64.b64encode(s.encode('utf8')).decode('utf8')
        headers = {'Authorization': 'Basic {}'.format(b64cred)}
        res = requests.post(url, data=data, headers=headers)
        if res.status_code != 200:
            logging.error('couldn\'t authenticate, status code: {} {}\n{}'.format(res.status_code, res.reason, res.text))
            return False
        j = json.loads(res.text)
        if 'error' in j:
            logging.error('couldn\'t authenticate: {}'.format(res.text))
            return False
        if 'access_token' not in j or 'expires_in' not in j:
            logging.error('auth response missing "access_token" and/or "expires_in": {}'.format(res.text))
            return False
        self._accesstoken = j['access_token']
        self._tokenexpiretime = int(time.time()) + int(j['expires_in'])
        logging.debug('received token {}, expires at {}'.format(self._accesstoken, self._tokenexpiretime))
        return True


class TracksProcessor(object):

    def __init__(self, auth):
        self._auth = auth

    @staticmethod
    def extract(jsondata):
        tracks = jsondata['tracks']
        extracted = []
        for t in tracks:
            d = {
                'title': t['name'],
                'artist': [a['name'] for a in t['artists']],
                'album': t['album']['name'],
                'tracknum': t['track_number'],
                'discnum': t['disc_number'],
                'duration': t['duration_ms'],
                'explicit': t['explicit'],
                'uri': t['uri'],
            }
            extracted.append(d)
        return extracted

    @staticmethod
    def loadtrackids(filename):
        with open(filename) as f:
            lines = [l.strip() for l in f.readlines() if l.strip()]
        trackids = []
        ifpat = re.compile('<iframe src="https://open.spotify.com/embed/track/(.*?)".*</iframe>')
        for l in lines:
            if l.startswith('spotify:track:'):
                tid = l.replace('spotify:track:', '')
            elif l.startswith('https://open.spotify.com/track/'):
                tid = l.replace('https://open.spotify.com/track/', '')
            elif l.startswith('https://open.spotify.com/embed/track/'):
                tid = l.replace('https://open.spotify.com/embed/track/', '')
            elif l.startswith('<iframe src="https://open.spotify.com/embed/track/'):
                m = ifpat.match(l)
                if m:
                    tid = m.group(1)
                else:
                    continue
            else:
                continue
            if '?' in tid:
                # remove query parameters from urls
                tid = tid[:tid.find('?')]
            trackids.append(tid)
        return trackids

    def loadtracksdata(self, trackidlist):
        ids = ','.join(trackidlist)
        url = 'https://api.spotify.com/v1/tracks?ids={}'.format(ids)
        if not self._auth.hasvalidaccesstoken() and not self._auth.authenticate():
            return
        headers = {
            'Accept': 'application/json',
            'Authorization': 'Bearer {}'.format(self._auth.accesstoken)}
        res = requests.get(url, headers=headers)
        if res.status_code == 200:
            return res.json()
        else:
            logging.error('couldn\'t load tracks: {} {}\n{}'.format(res.status_code, res.reason, res.text))


class PlaylistProcessor(object):

    def __init__(self, auth):
        self._auth = auth

    @staticmethod
    def extract(jsondata):

        d = {
            'name': jsondata['name'],
            'description': jsondata['description'],
            'owner': jsondata['owner']['id'],
            'uri': jsondata['uri'],
            'total': jsondata['tracks']['total'],
        }

        tracks = []
        for e in jsondata['tracks']['items']:
            t = e['track']
            td = {
                'title': t['name'],
                'artist': [a['name'] for a in t['artists']],
                'album': t['album']['name'],
                'tracknum': t['track_number'],
                'discnum': t['disc_number'],
                'duration': t['duration_ms'],
                'explicit': t['explicit'],
                'uri': t['uri'],
            }
            tracks.append(td)

        d['tracks'] = tracks

        return d

    def loadplaylistdata(self, playlist):
        # possible playlist values:
        # https://api.spotify.com/v1/users/joshschwaa/playlists/5kp8ZfRfhRzqJTpl5lpQeW
        # https://open.spotify.com/user/joshschwaa/playlist/5kp8ZfRfhRzqJTpl5lpQeW
        # spotify:user:joshschwaa:playlist:5kp8ZfRfhRzqJTpl5lpQeW
        urlpat = 'https://api.spotify.com/v1/playlists/{}'
        url = None
        if playlist.startswith('https://api.spotify.com/v1/playlists'):
            url = playlist
        else:
            if playlist.startswith('https://open.spotify.com/playlist/'):
                openurl = re.compile('.*playlist/(?P<plid>.*)')
                m = openurl.match(playlist)
            elif playlist.startswith('spotify:playlist:'):
                uri = re.compile('spotify:playlist:(?P<plid>.*)')
                m = uri.match(playlist)
            else:
                raise Exception('{} is not a valid playlist URL/URI'.format(playlist))
            if m:
                url = urlpat.format(m.groupdict()['plid'])

        if not url:
            raise Exception('no API URL')

        pljson = self._load(url)
        if not pljson:
            return
        nexturl = pljson['tracks']['next']
        # nexturl is null when the playlist is not paged
        while nexturl:
            nextjson = self._load(nexturl)
            if not nextjson:
                break
            items = nextjson['items']  # with offset there is no 'tracks' field
            pljson['tracks']['items'].extend(items)
            nexturl = nextjson['next']
        return pljson

    def _load(self, url):
        if not self._auth.hasvalidaccesstoken() and not self._auth.authenticate():
            return
        headers = {
            'Accept': 'application/json',
            'Authorization': 'Bearer {}'.format(self._auth.accesstoken)}
        res = requests.get(url, headers=headers)
        if res.status_code != 200:
            logging.error('couldn\'t load playlist: {} {}\n{}'.format(res.status_code, res.reason, res.text))
            return
        return res.json()


class TablePrinter(object):

    def __init__(self, tracktablefields, multifields=None):
        # tracktablefields defines what and in which order should be printed
        # multifields defines fields with more than one possible value
        self.__tracktablefields = tracktablefields
        self.__multifields = multifields if multifields else []
        self.__tracksfieldname = 'tracks'  # tracks key in a playlist

    def printplaylist(self, data, playlistfields=('name', 'description', 'owner', 'uri', 'total'), printto=sys.stdout):
        for f in playlistfields:
            print('# {}: {}'.format(f, data[f]), file=printto)
        self.printtracktable(data[self.__tracksfieldname], printto)

    def printtracktable(self, data, printto=sys.stdout):
        out = []
        maxlen = [0] * len(self.__tracktablefields)
        for d in data:
            l = []
            for i, f in enumerate(self.__tracktablefields):
                val = d[f]
                if f in self.__multifields:
                    s = (', '.join(val))
                    l.append(s)
                else:
                    l.append(val)
                vallen = len(l[i])
                maxlen[i] = vallen if vallen > maxlen[i] else maxlen[i]
            out.append(l)
        header = [f.capitalize().ljust(maxlen[i], ' ')
                  for i, f in enumerate(self.__tracktablefields)]
        print(' | '.join(header), file=printto)
        hline = ['-' * maxlen[i] for i, _ in enumerate(self.__tracktablefields)]
        print('---'.join(hline), file=printto)
        for outline in out:
            l = [f.ljust(maxlen[i], ' ') for i, f in enumerate(outline)]
            print(' | '.join(l), file=printto)


def savejson(jsondata, filename, sort_keys=False):
    with open(filename, 'w') as fout:
        json.dump(jsondata, fout, indent=4, sort_keys=sort_keys)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Extracts some information from the JSON result of an Spotify API tracks request.')
    parser.add_argument('-c', '--credentials', default='credentials.ini', help='Path to credentials file.')
    parser.add_argument('-i', '--input', dest='input', help='Input URI/URL/file', required=True)
    parser.add_argument(
        '-T', '--tracklistmode', dest='tracklistmode', action='store_true',
        help='Input is a file listing Spotify track URIs or links instead of a playlist URI or URL.')
    parser.add_argument(
        '-P', '--playlist-list-mode', dest='pllmode', action='store_true',
        help='Input is a file listing Spotify playlist URIs or links instead of a single playlist.'
             'In this mode the tables are saved instead of printed, filenames are determined by listed playlist names.')
    parser.add_argument(
        '-R', '--from-raw', dest='fromraw', action='store_true',
        help='Input is a saved raw API response that should be print as table.')
    parser.add_argument(
        '-r', '--saveraw', action='store_true', help='(optional flag) Save raw API response.')
    parser.add_argument(
        '-s', '--savejson', action='store_true', help='(optional flag) Save extracted json data.')
    parser.add_argument('-n', '--name', dest='name', help='(optional) Filename for output files.')
    parser.add_argument('-D', '--debug', help='Activate debug logging', action='store_true')

    args = parser.parse_args()

    if args.debug:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO
    logging.basicConfig(
        format='%(asctime)s %(levelname)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S',
        level=loglevel)

    auth = Auth(args.credentials)
    if not auth.hasvalidaccesstoken() and not auth.authenticate():
        sys.exit(1)

    ts = time.strftime('%Y-%m-%dT%H%M%S%Z', time.localtime())
    outname = ('{}_{}'.format(args.name, ts)
               if args.name
               else 'spotify-list_{}'.format(ts))

    printer = TablePrinter(['title', 'album', 'artist'], multifields=['artist'])

    if args.tracklistmode:
        tp = TracksProcessor(auth)

        if args.fromraw:
            rawapiresponse = json.loads(open(args.input).read())
            extracted = TracksProcessor.extract(rawapiresponse)
        else:
            tids = TracksProcessor.loadtrackids(args.input)
            response = tp.loadtracksdata(tids)
            if not response:
                sys.exit(1)
            if args.saveraw:
                savejson(response, outname + '_raw.json')
            extracted = TracksProcessor.extract(response)
            if args.savejson:
                savejson(extracted, outname + '.json', True)
        printer.printtracktable(extracted)
    else:
        pp = PlaylistProcessor(auth)
        if args.fromraw:
            rawapiresponse = json.loads(open(args.input).read())
            try:
                extracted = PlaylistProcessor.extract(rawapiresponse)
            except KeyError:
                logging.error('{} is not a raw playlist (try -l for tracklist mode)'.format(args.input))
                sys.exit(1)
            printer.printplaylist(extracted)
        else:
            if args.pllmode:
                inputlines = [l.strip() for l in open(args.input).readlines() if l.strip()]
            else:
                inputlines = [args.input]
            for inputline in inputlines:
                try:
                    response = pp.loadplaylistdata(inputline)
                    if args.pllmode:
                        outname = response['name']
                except Exception as e:
                    logging.error(e.message)
                    continue
                if not response:
                    logging.error('no playlist data for {}'.format(inputline))
                    continue
                if args.saveraw:
                    savejson(response, outname + '_raw.json')
                extracted = PlaylistProcessor.extract(response)
                if args.savejson:
                    savejson(extracted, outname + '.json', True)
                if args.pllmode:
                    logging.info('saving {}'.format(outname))
                    with codecs.open(outname, mode='wb', encoding='utf8') as fout:
                        printer.printplaylist(extracted, printto=fout)
                else:
                    printer.printplaylist(extracted)
